pre {
	"Running ETL".println();
}

rule CAEX2SysML
	transform s : CAEX30!CAEXFile
	to t : UML!Model {
		("runing CAEX2SysML ... ").println();
		t.name = s.fileName;	
		s.instanceHierarchy.internalElement.println();
		t.appendEquivalentsOfChildrenOf(s.instanceHierarchy.internalElement);
	}
	
	
rule IE2Class 
	transform ie : CAEX30!InternalElement
	to pe : UML!Class {
		pe.name = ie.name;	
		("** Package ["+ie.name+"] is generated.").println();
	}

	
operation Any appendChildren(c : Collection) {
	for (child in c) {
		("child: "+child.name).println();
		self.packagedElement::=child;
	}
}

operation Any appendEquivalentsOfChildrenOf(source : Any) {	
	self.packagedElement::= source;
	for (child in source) {
			('child name: '+child.name).println();
			('inner child is: '+child.internalElement.notEmpty()).println();
			if(child.internalElement.notEmpty()){
				('child.internalElement is::: '+child.internalElement).println();
				for (ch in child.internalElement) {
					self.appendEquivalentsOfChildrenOf(ch);
				}
			}
		}
}
