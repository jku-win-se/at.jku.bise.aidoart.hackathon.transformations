pre {
	"Running ETL".println();
	var caexFile = new CAEX30!CAEXFile;
	caexFile.fileName="caex_model";
	var iH= new CAEX30!InstanceHierarchy;
	iH.name= "instance_hierarchy";
	var umlTool : new Native("org.eclipse.epsilon.emc.uml.dt.UMLTool");
	var sysmlProfile = umlTool.getProfile("http://www.eclipse.org/papyrus/sysml/1.6/SysML/Blocks");
	
	var activitiesProfile = sysmlProfile.getPackagedElement("Activities");
	var allocationsProfile = sysmlProfile.getPackagedElement("Allocations");
	var blocksProfile = sysmlProfile.getPackagedElement("Blocks");
	var constraintBlocksProfile = sysmlProfile.getPackagedElement("ConstraintBlocks");
	var deprecatedElementsProfile = sysmlProfile.getPackagedElement("DeprecatedElements");
	var modelElementsProfile = sysmlProfile.getPackagedElement("ModelElements");
	var portsAndFlowsProfile = sysmlProfile.getPackagedElement("PortsAndFlows");
	var requirementsProfile = sysmlProfile.getPackagedElement("Requirements");

//	var amlProfile = AML!Profile.all.first();
	
	var blockStereotype = blocksProfile.getPackagedElement("Block");
//	var sucStereotype = amlProfile.getPackagedElement("SUC");
	var externalInterfaces = new Sequence; //a list containing the externalInterfaces for postprocessing purposes
}

post{
	var connectors = UML!Connector;
	iH.bindExternalInterface(connectors);	
	caexFile.instanceHierarchy.add(iH);
	("The transformation is done successfully!").println();
}

rule SysML2CAEX
	transform s : UML!Class 
	to  ie: CAEX30!InternalElement{
		guard : s.hasStereotypes(blockStereotype)
		ie.name= s.name;
		iH.internalElement.add(ie);
		
		for(prp in s.ownedAttribute){
			if (prp.EClass.name="Property"){
				var attr= new CAEX30!Attribute;
				attr.name = prp.name;
				attr.attributeDataType= prp.type.name;
				ie.attribute.add(attr);
			}
		}
		if (s.ownedAttribute.isDefined())
				ie.externalInterface ::= s.ownedPort;
		if (s.ownedConnector.isDefined())
			ie.internalLink ::= s.ownedConnector;
}	


rule port2externalElement 
	transform s : UML!Port
	to t : CAEX30!ExternalInterface {
	guard : s.EClass.name="Port"
	t.name=s.name;
	externalInterfaces.add(t); //adding the externalInterface for postprocessing purposes
}


rule connector2InternalLink 
	transform s : UML!Connector
	to t : CAEX30!InternalLink {
	t.name=s.name;
}


operation Any bindExternalInterface(connectors:Any) {
	var internalLinks = self.internalElement.internalLink;
	var temp_ils= new Sequence;
	for(il in internalLinks){
			if(il.size()>0){
				temp_ils.addAll(il);
				}
		}	
	for(c in connectors){
		var internalLink= temp_ils.selectOne(iterator : InternalLink | iterator.name=c.name);
		internalLink.partnerSideA= externalInterfaces.selectOne(iterator  | iterator.name=c.end.first().partWithPort.name);
		internalLink.partnerSideB= externalInterfaces.selectOne(iterator  | iterator.name=c.end.second().partWithPort.name);
	}
}


operation Any hasStereotypes(r : Any) {
	if (self.getAppliedStereotypes().size()>0){
		if (self.getAppliedStereotypes().first().name = r.name)
			return true;
		else return false;
	}
	return true;
}
